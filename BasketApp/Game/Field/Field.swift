//
//  Field.swift
//  BasketApp
//
//  Created by Daniil on 10.12.2020.
//
import UIKit
import Foundation
import RealmSwift
var currentZone: String = "Field"
fileprivate var currentTimeZone = "Field"
class Field: UIViewController, UIGestureRecognizerDelegate
{
    // OUTLET
    let myPlayerCell = "myPlayerCell"
    let enemyPlayerCell = "EnemyPlayerCell"
    let numTimeZone = "numTimeZoneCell"
    @IBOutlet var MyTeamColView: UICollectionView!
    @IBOutlet var EnemyTeamColView: UICollectionView!
    @IBOutlet var numTimeColView: UICollectionView!
    @IBOutlet var FieldView: UIView!
    @IBOutlet var FieldImage: UIImageView!
    @IBOutlet var myTeamLabel: UILabel!
    @IBOutlet var enemyTeamLabel: UILabel!
    @IBAction func backToMenu(_ sender: Any)
    {
        let alert = UIAlertController(title: "–í–Ω–∏–º–µ–Ω–∏", message: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?", preferredStyle: .alert)
        let ok  = UIAlertAction(title: "–î–∞", style: .destructive) {
            (action) in
            try! statWrite.write
            {
                let object = TeamStatic()
                var currentStat = GameStatic()
                currentStat.myTeam = myTeamRead[0].myTeam!
                currentStat.enemyTeam = enemysTeamRead[0].myTeam!
                currentStat.currentDate = currentDate()
                object.stat = currentStat
                statWrite.add(object)
                self.navigationController?.popViewController(animated: true)
            }
            
        }
        let no = UIAlertAction(title: "–ù–µ—Ç", style: .default, handler: nil)
        alert.addAction(ok)
        alert.addAction(no)
        self.present(alert, animated: true, completion: nil)
    }
    
   
    //-----------------
    override func viewDidLoad()
    {
        
        //–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
        try! myTeamWrite.write
        {
            for i in 0...11
            {
                myTeamRead[0].myTeam?.players[i].firstTime = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0] ]
                myTeamRead[0].myTeam?.players[i].secondTime = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0] ]
                myTeamRead[0].myTeam?.players[i].thirdTime = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0] ]
                myTeamRead[0].myTeam?.players[i].fourthTime = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0] ]
            }
        }
        try! enemysTeamWrite.write
        {
            for i in 0...11
            {
                enemysTeamRead[0].myTeam?.players[i].firstTime = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0] ]
                enemysTeamRead[0].myTeam?.players[i].secondTime = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0] ]
                enemysTeamRead[0].myTeam?.players[i].thirdTime = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0] ]
                enemysTeamRead[0].myTeam?.players[i].fourthTime = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0] ]
                
            }
        }
        //–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Å–∞–Ω–∏–µ
        let tap = UITapGestureRecognizer(target: self, action: #selector(selector))
        FieldView.addGestureRecognizer(tap)
        //–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∫—Ä–æ–ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É
        MyTeamColView.dataSource = self
        MyTeamColView.delegate = self
        MyTeamColView.backgroundColor = .blue
        MyTeamColView.layer.cornerRadius = 20
        myTeamLabel.text = myTeamRead[0].myTeam?.name
        self.MyTeamColView.register(UINib(nibName: "PlayerCell", bundle: nil), forCellWithReuseIdentifier: myPlayerCell)
        //–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∫—Ä–æ–ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É
        EnemyTeamColView.delegate = self
        EnemyTeamColView.dataSource = self
        EnemyTeamColView.backgroundColor = .blue
        EnemyTeamColView.layer.cornerRadius = 20
        enemyTeamLabel.text = enemysTeamRead[0].myTeam?.name
        self.EnemyTeamColView.register(UINib(nibName: "PlayerCell", bundle: nil), forCellWithReuseIdentifier: enemyPlayerCell)
        // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–±–ª–æ —Å —Ç–∞–π–º–∞–º–∏
        numTimeColView.dataSource = self
        numTimeColView.delegate = self
        numTimeColView.backgroundColor = .blue
        numTimeColView.layer.cornerRadius = 20
        self.numTimeColView.register(UINib(nibName: "numTimeZoneCell", bundle: nil), forCellWithReuseIdentifier: numTimeZone)
        
    }
    //–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    @IBAction func goToStatistics(_ sender: Any)
    {
        let newVC = storyboard?.instantiateViewController(identifier: "StaticView") as! StaticView
        self.navigationController?.pushViewController(newVC, animated: true)
    }
    //–í—ã–¥–µ–ª–∏—Ç—å –Ω–∞–∂–∞—Ç—É—é –∑–æ–Ω—É
    @objc private func selector(_ touch: UITapGestureRecognizer)
    {
        //–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–∂–∞—Ç–∏—è
        let touchPoint = touch.location(in: FieldView)
        let x = Int(touchPoint.x)
        let y = Int(touchPoint.y)
        //–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if let image = FieldImage.image
        {
            //–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç
            let color = pixel(image: image, x: x, y: y)
            //–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä image(—Å–º–æ—Ç—Ä–µ—Ç—å assets)
            let numZone = numberZone(color: color, x: x, y: y)
            //–û–±–Ω–æ–≤–∏—Ç—å image & current zone
            currentZone = numZone
            FieldImage.image = UIImage(named: numZone)
        }
        else
        {
            print("ERROR IN IMAGE")
        }
    }
}
extension Field: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout
{
    //MARK: –ó–∞–¥–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if collectionView == numTimeColView
        {
            return 4
        }
        else
        {
            return 12
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        //MARK: –ó–∞–¥–∞—Ç—å —è—á–µ–π–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        if collectionView == MyTeamColView
        {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: myPlayerCell , for: indexPath) as! PlayerCell
            cell.playerNum.text = myTeamRead[0].myTeam?.players[indexPath.row].numeric
            cell.backgroundColor = .orange
            
            return cell
        }
        //MARK: –ó–∞–¥–∞—Ç—å —è—á–µ–π–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        else if collectionView == EnemyTeamColView
        {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier:enemyPlayerCell , for: indexPath) as! PlayerCell
            cell.playerNum.text = enemysTeamRead[0].myTeam?.players[indexPath.row].numeric
            cell.backgroundColor = .orange
            
            return cell
        }
        //MARK: –ó–∞–¥–∞—Ç—å —è—á–µ–π–∫–∏ –¥–ª—è —Ç–∞–±–ª–æ
        else if collectionView == numTimeColView
        {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: numTimeZone , for: indexPath) as! numTimeZoneCell
            cell.title.text = String(indexPath.row + 1)
            cell.backgroundColor = .orange
            cell.layer.cornerRadius = 15
            return cell
        }
        else
        {
            return UICollectionViewCell()
        }
        
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize
    {
        //–ó–∞–¥–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫
        if collectionView == numTimeColView
        {
            return CGSize(width: 30 , height: 30)
        }
        else
        {
            return CGSize(width: 50 , height: 50)
        }
    }
    
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)
    {
        // –í—ã–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if collectionView == numTimeColView
        {
            currentTimeZone = String(indexPath.row + 1)
            let cell = collectionView.cellForItem(at: indexPath)
            cell?.backgroundColor = .red
            print("–í—ã–±—Ä–∞–Ω \(indexPath.row + 1) —Ç–∞–π–º")
        }
        else if currentTimeZone == "Field"
        {
            let alert = UIAlertController(title: "–í–Ω–∏–º–∞–Ω–∏–µ", message: "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–∞–π–ºüôÄ", preferredStyle: .alert)
            let ok = UIAlertAction(title: "–•–æ—Ä–æ—à–æ", style: .default) {(action) in collectionView.cellForItem(at: indexPath)?.backgroundColor = .orange}
            alert.addAction(ok)
            self.present(alert, animated: true, completion: nil)
        }
        //–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∑–æ–Ω–∞
        else if currentZone == "Field"
        {
            let alert = UIAlertController(title: "–í–Ω–∏–º–∞–Ω–∏–µ", message: "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∑–æ–Ω—ÉüôÄ", preferredStyle: .alert)
            let ok = UIAlertAction(title: "–•–æ—Ä–æ—à–æ", style: .default) {(action) in collectionView.cellForItem(at: indexPath)?.backgroundColor = .orange}
            alert.addAction(ok)
            self.present(alert, animated: true, completion: nil)
        }
        //MARK: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Alert –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        else if collectionView == MyTeamColView
        {
            collectionView.cellForItem(at: indexPath)?.backgroundColor = .red
            let alert = UIAlertController(title: "–ò–≥—Ä–æ–∫ ‚Ññ\(myTeamRead[0].myTeam!.players[indexPath.row].numeric)", message: "–ö–æ–º–∞–Ω–¥–∞ \(myTeamRead[0].myTeam!.name)\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–∏–µ", preferredStyle: .alert)
            let lazyShot = UIAlertAction(title: "–ë—Ä–æ—Å–æ–∫", style: .default)
            { (action) in
                try! myTeamWrite.write
                {
                    switch currentTimeZone
                    {
                    case "2":
                        myTeamRead[0].myTeam?.players[indexPath.row].secondTime[Int(currentZone)! - 1][1] += 1
                        break
                    case "3":
                        myTeamRead[0].myTeam?.players[indexPath.row].thirdTime[Int(currentZone)! - 1][1] += 1
                        break
                    case "4":
                        myTeamRead[0].myTeam?.players[indexPath.row].fourthTime[Int(currentZone)! - 1 ][1] += 1
                        break
                        
                    default:
                        myTeamRead[0].myTeam?.players[indexPath.row].firstTime[Int(currentZone)! - 1][1] += 1
                        
                        break
                    }
                }
                let alert = UIAlertController(title: "‚õπüèª‚Äç‚ôÇÔ∏è", message: "–ë—Ä–æ—Å–æ–∫ –∑–∞—Å—á–∏—Ç–∞–Ω", preferredStyle: .alert)
                let ok = UIAlertAction(title: "–•–æ—Ä–æ—à–æ", style: .default) {(action) in collectionView.cellForItem(at: indexPath)?.backgroundColor = .orange}
                alert.addAction(ok)
                self.present(alert, animated: true, completion: nil)
            }
            alert.addAction(lazyShot)
            
            let winShot = UIAlertAction(title: "–ü–æ–ø–∞–¥–∞–Ω–∏–µ", style: .default)
            {
                (action) in
                try! myTeamWrite.write
                {
                    switch currentTimeZone
                    {
                    case "2" :
                        myTeamRead[0].myTeam?.players[indexPath.row].secondTime[Int(currentZone)! - 1][1] += 1
                        myTeamRead[0].myTeam?.players[indexPath.row].secondTime[Int(currentZone)! - 1][0] += 1
                        break
                    case "3" :
                        myTeamRead[0].myTeam?.players[indexPath.row].thirdTime[Int(currentZone)! - 1][1] += 1
                        myTeamRead[0].myTeam?.players[indexPath.row].thirdTime[Int(currentZone)! - 1][0] += 1
                        break
                    case "4" :
                        myTeamRead[0].myTeam?.players[indexPath.row].fourthTime[Int(currentZone)! - 1][1] += 1
                        myTeamRead[0].myTeam?.players[indexPath.row].fourthTime[Int(currentZone)! - 1][0] += 1
                        break
                    default :
                        myTeamRead[0].myTeam?.players[indexPath.row].firstTime[Int(currentZone)! - 1][1] += 1
                        myTeamRead[0].myTeam?.players[indexPath.row].firstTime[Int(currentZone)! - 1][0] += 1
                        
                    }
                }
                collectionView.cellForItem(at: indexPath)?.backgroundColor = .orange
                let alert = UIAlertController(title: "‚õπüèª‚Äç‚ôÇÔ∏è", message: "–ü–æ–ø–∞–¥–∞–Ω–∏–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ", preferredStyle: .alert)
                let ok = UIAlertAction(title: "–•–æ—Ä–æ—à–æ", style: .default) {(action) in collectionView.cellForItem(at: indexPath)?.backgroundColor = .orange}
                alert.addAction(ok)
                self.present(alert, animated: true, completion: nil)
            }
            alert.addAction(winShot)
            let error = UIAlertAction(title: "–û—à–∏–±–∫–∞", style: .default) {(action) in collectionView.cellForItem(at: indexPath)?.backgroundColor = .orange}
            alert.addAction(error)
            self.present(alert, animated: true, completion: nil)
            collectionView.cellForItem(at: indexPath)?.backgroundColor = .orange
        }
        //MARK: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Alert –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        else if collectionView == EnemyTeamColView
        {
            let alert = UIAlertController(title: "–ò–≥—Ä–æ–∫ ‚Ññ\(enemysTeamRead[0].myTeam!.players[indexPath.row].numeric)", message: "–ö–æ–º–∞–Ω–¥–∞ \(enemysTeamRead[0].myTeam!.name)\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–∏–µ", preferredStyle: .alert)
            let lazyShot = UIAlertAction(title: "–ë—Ä–æ—Å–æ–∫", style: .default)
            { (action) in
                try! enemysTeamWrite.write{
                    switch currentTimeZone
                    {
                    case "2": enemysTeamRead[0].myTeam?.players[indexPath.row].secondTime[Int(currentZone)! - 1][1] += 1
                        break
                    case "3":
                        enemysTeamRead[0].myTeam?.players[indexPath.row].thirdTime[Int(currentZone)! - 1][1] += 1
                        break
                    case "4":
                        enemysTeamRead[0].myTeam?.players[indexPath.row].fourthTime[Int(currentZone)! - 1][1] += 1
                        break
                        
                    default:
                        enemysTeamRead[0].myTeam?.players[indexPath.row].firstTime[Int(currentZone)! - 1][1] += 1
                    }
                }
                let alert = UIAlertController(title: "‚õπüèª‚Äç‚ôÇÔ∏è", message: "–ë—Ä–æ—Å–æ–∫ –∑–∞—Å—á–∏—Ç–∞–Ω", preferredStyle: .alert)
                let ok = UIAlertAction(title: "–•–æ—Ä–æ—à–æ", style: .default) {(action) in collectionView.cellForItem(at: indexPath)?.backgroundColor = .orange}
                alert.addAction(ok)
                self.present(alert, animated: true, completion: nil)
            }
            alert.addAction(lazyShot)
            let winShot = UIAlertAction(title: "–ü–æ–ø–∞–¥–∞–Ω–∏–µ", style: .default)
            {
                (action) in
                try! enemysTeamWrite.write{
                    switch currentTimeZone
                    {
                    case "2" :
                        enemysTeamRead[0].myTeam?.players[indexPath.row].secondTime[Int(currentZone)! - 1][1] += 1
                        enemysTeamRead[0].myTeam?.players[indexPath.row].secondTime[Int(currentZone)! - 1][0] += 1
                        break
                    case "3" :
                        enemysTeamRead[0].myTeam?.players[indexPath.row].thirdTime[Int(currentZone)! - 1][1] += 1
                        enemysTeamRead[0].myTeam?.players[indexPath.row].thirdTime[Int(currentZone)! - 1][0] += 1
                        break
                    case "4" :
                        enemysTeamRead[0].myTeam?.players[indexPath.row].fourthTime[Int(currentZone)! - 1][1] += 1
                        enemysTeamRead[0].myTeam?.players[indexPath.row].fourthTime[Int(currentZone)! - 1][0] += 1
                        break
                    default :
                        enemysTeamRead[0].myTeam?.players[indexPath.row].firstTime[Int(currentZone)! - 1][1] += 1
                        enemysTeamRead[0].myTeam?.players[indexPath.row].firstTime[Int(currentZone)! - 1][0] += 1
                    }
                }
                let alert = UIAlertController(title: "‚õπüèª‚Äç‚ôÇÔ∏è", message: "–ü–æ–ø–∞–¥–∞–Ω–∏–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ", preferredStyle: .alert)
                let ok = UIAlertAction(title: "–•–æ—Ä–æ—à–æ", style: .default) {(action) in collectionView.cellForItem(at: indexPath)?.backgroundColor = .orange}
                alert.addAction(ok)
                self.present(alert, animated: true, completion: nil)
            }
            alert.addAction(winShot)
            let error = UIAlertAction(title: "–û—à–∏–±–∫–∞", style: .default) {(action) in collectionView.cellForItem(at: indexPath)?.backgroundColor = .orange}
            alert.addAction(error)
            self.present(alert, animated: true, completion: nil)
        }
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        
        return UIEdgeInsets(top: 0, left: 15, bottom: 0, right: 15)
        
    }
    func collectionView(_ collectionView: UICollectionView, didDeselectItemAt indexPath: IndexPath) {
        let cell = collectionView.cellForItem(at: indexPath)
        cell?.backgroundColor = .orange
        
    }
}

